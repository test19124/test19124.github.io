{
    "version": "https://jsonfeed.org/version/1",
    "title": "test19124 • All posts by \"debug\" tag",
    "description": "lzs的博客",
    "home_page_url": "https://test19124.github.io",
    "items": [
        {
            "id": "https://test19124.github.io/2021/08/09/debug-de-fang-fa-ji-ce-lue/",
            "url": "https://test19124.github.io/2021/08/09/debug-de-fang-fa-ji-ce-lue/",
            "title": "debug的方法及策略",
            "date_published": "2021-08-09T12:02:42.000Z",
            "content_html": "<p>C++ 以及普及组选手多使用静态查错法与输出调试法</p>\n<p>提高组选手可以适当使用对拍调试法</p>\n<p>[<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXNRNHkxSzdUNC8=\">https://www.bilibili.com/video/BV1sQ4y1K7T4/</span> 初级调试指南视频版]</p>\n<p>[<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWhlNDExcDc0WS8=\">https://www.bilibili.com/video/BV1he411p74Y/</span> 高级调试指南视频版]</p>\n<p>= 调试指南 =</p>\n<p>1：在草稿纸上模拟程序的运行，写下一些关键变量的中间结果</p>\n<p>2：利用打印调试法打印出这些中间变量的值</p>\n<p>3：对比观察</p>\n<span id=\"more\"></span>\n<p>下面介绍利用数据去查错的几种查错方法</p>\n<p>== 静态查错法 ==</p>\n<p>静态查错法的意思是说，写完程序，先整体浏览一遍代码，把一些肉眼可见的，明显发现是错的地方修改掉</p>\n<p>根据以往的经验，我们发现，一个选手功力越深，静态查错的时候能发现的问题越多，往往大多数错误不需要下面的方法就已经查出来了。</p>\n<p>== 输出调试法 ==</p>\n<p>首先，我们运行了一组数据，发现结果不对，然后静态查错也没看出什么来，这个时候我们采用输出调试法。</p>\n<p>1：先 分段  打印一些变量，观察变量的值跟预想的对不对，找到最先不对的地方，然后检查，这个时候下面的代码就不用看了</p>\n<p>2：不停的重复 1 的行为，不断的缩小定位错误区域，直到所有的错误修复完毕</p>\n<p>举个例子</p>\n<p>比如下面这个程序，题库链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly81MTdjb2RpbmcuY29tL3AvMTEwMA==\">https://517coding.com/p/1100</span></p>\n<pre><code class=\"language-c++\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[10010];\nint b[10010];\nint main(void)&#123;\n\tint n,m;\n\tint k=-1e9;\n\tscanf(&quot;%d%d&quot;,&amp;n,&amp;m);\n\tfor(int i=1;i&lt;=n;i++) scanf(&quot;%d&quot;,&amp;a[i]);\n\tfor(int i=1;i&lt;=m;i++) scanf(&quot;%d&quot;,&amp;b[i]);\n\tfor(int i=1;i&lt;=n;i++) &#123;\n\t\tfor(int j=1;j&lt;=n;j++) &#123;\n\t\t    \n\t\t\tif(a[i]+b[j]&gt;k) &#123; \n\t\t//下面这行代码是用来打印调试的语句\n\t\t\t     printf(&quot;i=%d j=%d sum=%d\\n&quot;, i, j, a[i]+b[j]);\n\t\t\t     k=a[i]+b[j];\n\t\t\t&#125;\n\t\t&#125;\n       &#125;\n\tprintf(&quot;%d&quot;,k);\n\treturn 0;\n&#125;\n\n/*\n错误数据：\n\n2 3\n1 2\n1 2 3\n*/\n</code></pre>\n<p>我们可以在循环里面加一句 printf 语句打印关键信息，然后运行代码下方的错误数据，我们发现会输出如下信息</p>\n<pre><code class=\"language-c++\">2 3\n1 2\n1 2 3\ni=1 j=1 sum=2\ni=1 j=2 sum=3\ni=2 j=2 sum=4\n4\n</code></pre>\n<p>可以发现，答案明明是 5，但是却输出了 4，而且中间过程也并没有产生 5，而答案 5 是来自于第一个数组中的 2 与第二个数组中的 3 相加得到的，此时我们通过调试信息的输出并没有发现这两个数被同时枚举到，于是我们检查两个 for 循环，这个时候发现了两个 for 循环枚举的都是 1 到 n，而实际上，第二个循环应该枚举 1 到 m，修改之后，这个程序就可以正常通过了</p>\n<p>== 对拍调试法 ==</p>\n<p>=== <span class=\"exturl\" data-url=\"aHR0cDovL2R1aXBhaS5zaA==\">duipai.sh</span> ===</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">t</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">let</span> <span class=\"token string\">\"t = <span class=\"token variable\">$t</span> + 1\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin class-name\">printf</span> <span class=\"token variable\">$t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\":<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ./rand <span class=\"token operator\">></span> rand.txt</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ./AC <span class=\"token operator\">&lt;</span> rand.txt <span class=\"token operator\">></span> AC.out</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ./WA <span class=\"token operator\">&lt;</span> rand.txt <span class=\"token operator\">></span> WA.out</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token function\">diff</span> AC.out WA.out<span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"WA<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">cat</span> rand.txt</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token builtin class-name\">break</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>=== run.bat ===</p>\n<pre><code class=\"language-bat\">:loop \n    @echo off   \n    gen.exe &gt; in.txt                     \n    my.exe &lt; in.txt  &gt; myout.txt     \n    std.exe &lt; in.txt  &gt; stdout.txt\n    fc myout.txt stdout.txt              \nif not errorlevel 1   goto loop         \npause\n</code></pre>\n<p>=== std.cpp ===</p>\n<pre><code class=\"language-c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() &#123;\n  int a, b;\n  cin &gt;&gt; a &gt;&gt; b;\n  cout &lt;&lt; a + b &lt;&lt; endl;\n  return 0;\n&#125;\n</code></pre>\n<p>=== my.cpp ===</p>\n<pre><code class=\"language-c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n//这是一个错误程序\nint main() &#123;\n  int a, b;\n  cin &gt;&gt; a &gt;&gt;b;\n  if (a &gt; 130 &amp;&amp; b &gt; 130) &#123;\n    cout &lt;&lt; a - b &lt;&lt; endl;\n  &#125; else &#123;\n    cout &lt;&lt; a + b &lt;&lt; endl;\n  &#125;\n  return 0;\n&#125;\n</code></pre>\n<p>=== gen.cpp ===</p>\n<pre><code class=\"language-c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// 返回0到x-1之间的随机数\n// rand()函数返回 0-32767之间的一个随机数\nint get_rand(int x) &#123;\n  return rand() * rand() % x + 1;\n&#125;\n\n//返回L 到 R之间的整数\nint get_rand(int L, int R) &#123;\n  return rand() * rand() % (R-L+1) + L;\n&#125;\n\nint main() &#123;\n  //初始化随机种子\n  srand(time(0));\n  int a, b;\n\n  //生成一组随机数据\n  a = get_rand(1, 200);\n  b = get_rand(1, 200);\n  cout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt;endl;\n  return 0;\n&#125;\n\n</code></pre>\n",
            "tags": [
                "DEBUG"
            ]
        }
    ]
}